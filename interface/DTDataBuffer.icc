/*
 *  See header file for a description of this class.
 *
 *  $Date: 2005/12/01 12:48:05 $
 *  $Revision: 1.3 $
 *  \author Paolo Ronchese INFN Padova
 *
 */

//----------------------
// This Class' Header --
//----------------------
#include "CondFormats/DTObjects/interface/DTDataBuffer.h"

//-------------------------------
// Collaborating Class Headers --
//-------------------------------


//---------------
// C++ Headers --
//---------------
#include <iostream>

//-------------------
// Initializations --
//-------------------

template<class T>
T DTDataBuffer<T>::defaultObject;

template<class T> typename
DTDataBuffer<T>::buffer_type DTDataBuffer<T>::dataBuffer;

//----------------
// Constructors --
//----------------
template<class T>
DTDataBuffer<T>::DTDataBuffer() {
}


template<class T>
DTDataBuffer<T>::NamedBuffer::NamedBuffer( const std::string& bType,
                                           const std::string& bName,
                                           int min1, int min2, int min3,
                                           int min4, int min5, int min6, 
                                           int num1, int num2, int num3,
                                           int num4, int num5, int num6, 
                                           const T& init ):
  bufferType( bType ),
  bufferName( bName ),
  data( 0 ) {

  if ( ( bType ==       "cell" ) ||
       ( bType ==      "layer" ) ||
       ( bType == "superlayer" ) ||
       ( bType ==    "chamber" ) ) {
    nMaxWheel      = num1;
    nMaxStation    = num2;
    nMaxSector     = num3;
    nMaxSL         = num4;
    nMaxLayer      = num5;
    nMaxCell       = num6;
    nMaxDDU        = 1;
    nMaxROS        = 1;
    nMaxROB        = 1;
    nMaxTDC        = 1;
    nMaxTDCChannel = 1;
    nMinWheel      = min1;
    nMinStation    = min2;
    nMinSector     = min3;
    nMinSL         = min4;
    nMinLayer      = min5;
    nMinCell       = min6;
    nMinDDU        = 0;
    nMinROS        = 0;
    nMinROB        = 0;
    nMinTDC        = 0;
    nMinTDCChannel = 0;
  }
  if ( bType == "tdc_channel" ) {
    nMaxDDU        = num1;
    nMaxROS        = num2;
    nMaxROB        = num3;
    nMaxTDC        = num4;
    nMaxTDCChannel = num5;
    nMaxWheel      = 1;
    nMaxStation    = 1;
    nMaxSector     = 1;
    nMaxSL         = 1;
    nMaxLayer      = 1;
    nMaxCell       = 1;
    nMinDDU        = min1;
    nMinROS        = min2;
    nMinROB        = min3;
    nMinTDC        = min4;
    nMinTDCChannel = min5;
    nMinWheel      = 0;
    nMinStation    = 0;
    nMinSector     = 0;
    nMinSL         = 0;
    nMinLayer      = 0;
    nMinCell       = 0;
  }

  int nObjects = 0;
  if ( bType ==        "cell" ) nObjects = nMaxWheel      *
                                           nMaxStation    *
                                           nMaxSector     *
                                           nMaxSL         *
                                           nMaxLayer      *
                                           nMaxCell;
  if ( bType ==       "layer" ) nObjects = nMaxWheel      *
                                           nMaxStation    *
                                           nMaxSector     *
                                           nMaxSL         *
                                           nMaxLayer;
  if ( bType ==  "superlayer" ) nObjects = nMaxWheel      *
                                           nMaxStation    *
                                           nMaxSector     *
                                           nMaxSL;
  if ( bType ==     "chamber" ) nObjects = nMaxWheel      *
                                           nMaxStation    *
                                           nMaxSector;
  if ( bType == "tdc_channel" ) nObjects = nMaxDDU        *
                                           nMaxROS        *
                                           nMaxROB        *
                                           nMaxTDC        *
                                           nMaxTDCChannel;
  if ( !nObjects ) return;
  data = new T[nObjects];
  T*
  dptr = data + nObjects;
  while ( dptr-- > data ) *dptr = init;

}



//--------------
// Destructor --
//--------------
template<class T>
DTDataBuffer<T>::~DTDataBuffer() {
  const_iter iter = dataBuffer.begin();
  const_iter iend = dataBuffer.end();
  while ( iter != iend ) delete *iter++;
}


template<class T>
DTDataBuffer<T>::NamedBuffer::~NamedBuffer() {
  delete[] data;
}


//--------------
// Operations --
//--------------
template<class T>
bool DTDataBuffer<T>::insertCellData( const std::string& name,
                                      int   wheelId,
                                      int stationId,
                                      int  sectorId,
                                      int      slId,
                                      int   layerId,
                                      int    cellId,
                                      const T& current ) {

  NamedBuffer* nBuf = findNamedBuffer( "cell", name );
  if ( nBuf == 0 ) return false;
  T* data = nBuf->data;
  data[nBuf->geometryGlobalId( wheelId,
                             sectorId,
                            stationId,
                                 slId,
                              layerId,
                               cellId )] = current;
  return true;

}


template<class T>
bool DTDataBuffer<T>::insertLayerData( const std::string& name,
                                       int   wheelId,
                                       int  sectorId,
                                       int stationId,
                                       int      slId,
                                       int   layerId,
                                       const T& current ) {

  NamedBuffer* nBuf = findNamedBuffer( "layer", name );
  if ( nBuf == 0 ) return false;
  T* data = nBuf->data;
  data[nBuf->geometryGlobalId( wheelId,
                              sectorId,
                             stationId,
                                  slId,
                               layerId )] = current;
  return true;

}


template<class T>
bool DTDataBuffer<T>::insertSLData( const std::string& name,
                                    int   wheelId,
                                    int  sectorId,
                                    int stationId,
                                    int      slId,
                                    const T& current ) {

  NamedBuffer* nBuf = findNamedBuffer( "superlayer", name );
  if ( nBuf == 0 ) return false;
  T* data = nBuf->data;
  data[nBuf->geometryGlobalId( wheelId,
                              sectorId,
                             stationId,
                                  slId )] = current;
  return true;

}


template<class T>
bool DTDataBuffer<T>::insertChamberData( const std::string& name,
                                         int   wheelId,
                                         int  sectorId,
                                         int stationId,
                                         const T& current ) {

  NamedBuffer* nBuf = findNamedBuffer( "chamber", name );
  if ( nBuf == 0 ) return false;
  T* data = nBuf->data;
  data[nBuf->geometryGlobalId( wheelId,
                              sectorId,
                             stationId )] = current;
  return true;

}


template<class T>
bool DTDataBuffer<T>::insertTDCChannelData( const std::string& name,
                                            int        dduId,
                                            int        rosId,
                                            int        robId,
                                            int        tdcId,
                                            int tdcChannelId,
                                            const T& current ) {

  NamedBuffer* nBuf = findNamedBuffer( "tdc_channel", name );
  if ( nBuf == 0 ) return false;
  T* data = nBuf->data;
  data[nBuf->readoutGlobalId( dduId,
                              rosId,
                              robId,
                              tdcId,
                       tdcChannelId )] = current;
  return true;

}


template<class T>
const T& DTDataBuffer<T>::getCellData( const std::string& name,
                                       int   wheelId,
                                       int  sectorId,
                                       int stationId,
                                       int      slId,
                                       int   layerId,
                                       int    cellId ) {

  NamedBuffer* nBuf = findNamedBuffer( "cell", name );
  if ( nBuf == 0 ) return defaultObject;
  T* data = nBuf->data;
  return data[nBuf->geometryGlobalId( wheelId,
                                     sectorId,
                                    stationId,
                                         slId,
                                      layerId,
                                       cellId )];

}


template<class T>
const T& DTDataBuffer<T>::getLayerData( const std::string& name,
                                        int   wheelId,
                                        int  sectorId,
                                        int stationId,
                                        int      slId,
                                        int   layerId ) {

  NamedBuffer* nBuf = findNamedBuffer( "layer", name );
  T* data = nBuf->data;
  if ( nBuf == 0 ) return defaultObject;
  return data[nBuf->geometryGlobalId( wheelId,
                                     sectorId,
                                    stationId,
                                         slId,
                                      layerId )];

}


template<class T>
const T& DTDataBuffer<T>::getSLData( const std::string& name,
                                     int   wheelId,
                                     int  sectorId,
                                     int stationId,
                                     int      slId ) {

  NamedBuffer* nBuf = findNamedBuffer( "superlayer", name );
  const T* data = nBuf->data;
  if ( nBuf == 0 ) return defaultObject;
  return data[nBuf->geometryGlobalId( wheelId,
                                     sectorId,
                                    stationId,
                                         slId )];

}


template<class T>
const T& DTDataBuffer<T>::getChamberData( const std::string& name,
                                          int   wheelId,
                                          int  sectorId,
                                          int stationId ) {

  NamedBuffer* nBuf = findNamedBuffer( "chamber", name );
  T* data = nBuf->data;
  if ( nBuf == 0 ) return defaultObject;
  return data[nBuf->geometryGlobalId( wheelId,
                                     sectorId,
                                    stationId )];

}


template<class T>
const T& DTDataBuffer<T>::getTDCChannelData( const std::string& name,
                                             int        dduId,
                                             int        rosId,
                                             int        robId,
                                             int        tdcId,
                                             int tdcChannelId ) {

  NamedBuffer* nBuf = findNamedBuffer( "tdc_channel", name );
  T* data = nBuf->data;
  if ( nBuf == 0 ) return defaultObject;
  return data[nBuf->readoutGlobalId( dduId,
                                     rosId,
                                     robId,
                                     tdcId,
                              tdcChannelId )];

}


template<class T>
bool DTDataBuffer<T>::openBuffer( const std::string& bType,
                                const std::string& bName,
                                int min1, int min2, int min3,
                                int min4, int min5, int min6, 
                                int max1, int max2, int max3,
                                int max4, int max5, int max6, 
                                const T& init ) {
  max1 += ( 1 - min1 );
  max2 += ( 1 - min2 );
  max3 += ( 1 - min3 );
  max4 += ( 1 - min4 );
  max5 += ( 1 - min5 );
  max6 += ( 1 - min6 );
  buf_iter iter = dataBuffer.begin();
  buf_iter iend = dataBuffer.end();
  NamedBuffer* bufPtr = 0;
  while ( iter != iend ) {
    NamedBuffer* data = *iter++;
    if ( data->type() != bType ) continue;
    if ( data->name() != bName ) continue;
    bufPtr = data;
    break;
  }

  if ( bufPtr == 0 ) dataBuffer.push_back( bufPtr = 
       new NamedBuffer( bType, bName, 
                        min1, min2, min3, min4, min5, min6, 
                        max1, max2, max3, max4, max5, max6, 
                        init ) );
  else return false;
  return true;

}


template<class T>
bool DTDataBuffer<T>::findBuffer( const std::string& bType,
                                  const std::string& bName ) {

  const_iter iter = dataBuffer.begin();
  const_iter iend = dataBuffer.end();
  const NamedBuffer* bufPtr = 0;
  while ( iter != iend ) {
    const NamedBuffer* data = *iter++;
    if ( data->type() != bType ) continue;
    if ( data->name() != bName ) continue;
    bufPtr = data;
    break;
  }

  if ( bufPtr == 0 ) return false;

  return true;

}


template<class T> typename
DTDataBuffer<T>::NamedBuffer* 
DTDataBuffer<T>::findNamedBuffer( const std::string& bType,
                                  const std::string& bName ) {

  buf_iter iter = dataBuffer.begin();
  buf_iter iend = dataBuffer.end();
  while ( iter != iend ) {
    NamedBuffer* data = *iter++;
    if ( data->type() != bType ) continue;
    if ( data->name() != bName ) continue;
    return data;
  }
  return 0;

}


template<class T>
int DTDataBuffer<T>::NamedBuffer::geometryGlobalId( int   wheelId,
                                                    int  sectorId,
                                                    int stationId,
                                                    int      slId,
                                                    int   layerId,
                                                    int    cellId ) {
    wheelId -= nMinWheel;
   sectorId -= nMinSector;
  stationId -= nMinStation;
       slId -= nMinSL;
    layerId -= nMinLayer;
     cellId -= nMinCell;
  if (   wheelId >= nMaxWheel   ) return 0;
  if (  sectorId >= nMinSector  ) return 0;
  if ( stationId >= nMinStation ) return 0;
  if (      slId >= nMinSL      ) return 0;
  if (   layerId >= nMinLayer   ) return 0;
  if (    cellId >= nMinCell    ) return 0;
  return ( ( ( ( ( ( ( ( ( wheelId   * nMaxSector  )
                       +  sectorId ) * nMaxStation )
                       + stationId ) * nMaxSL      )
                       +      slId ) * nMaxLayer   )
                       +   layerId ) * nMaxCell    )
                       +    cellId;
}


template<class T>
int DTDataBuffer<T>::NamedBuffer::geometryGlobalId( int   wheelId,
                                                    int  sectorId,
                                                    int stationId,
                                                    int      slId,
                                                    int   layerId ) {
    wheelId -= nMinWheel;
   sectorId -= nMinSector;
  stationId -= nMinStation;
       slId -= nMinSL;
    layerId -= nMinLayer;
  if (   wheelId >= nMaxWheel   ) return 0;
  if (  sectorId >= nMinSector  ) return 0;
  if ( stationId >= nMinStation ) return 0;
  if (      slId >= nMinSL      ) return 0;
  if (   layerId >= nMinLayer   ) return 0;
  return ( ( ( ( ( ( ( wheelId   * nMaxSector  )
                   +  sectorId ) * nMaxStation )
                   + stationId ) * nMaxSL      )
                   +      slId ) * nMaxLayer   )
                   +   layerId;
}



template<class T>
int DTDataBuffer<T>::NamedBuffer::geometryGlobalId( int   wheelId,
                                                    int  sectorId,
                                                    int stationId,
                                                    int      slId ) {
    wheelId -= nMinWheel;
   sectorId -= nMinSector;
  stationId -= nMinStation;
       slId -= nMinSL;
  if (   wheelId >= nMaxWheel   ) return 0;
  if (  sectorId >= nMinSector  ) return 0;
  if ( stationId >= nMinStation ) return 0;
  if (      slId >= nMinSL      ) return 0;
  return ( ( ( ( ( wheelId   * nMaxSector  )
               +  sectorId ) * nMaxStation )
               + stationId ) * nMaxSL      )
               +      slId;
}


template<class T>
int DTDataBuffer<T>::NamedBuffer::geometryGlobalId( int   wheelId,
                                                    int  sectorId,
                                                    int stationId ) {
    wheelId -= nMinWheel;
   sectorId -= nMinSector;
  stationId -= nMinStation;
  if (   wheelId >= nMaxWheel   ) return 0;
  if (  sectorId >= nMinSector  ) return 0;
  if ( stationId >= nMinStation ) return 0;
  return ( ( ( wheelId   * nMaxSector  )
           +  sectorId ) * nMaxStation )
           + stationId;
}


template<class T>
int DTDataBuffer<T>::NamedBuffer::readoutGlobalId( int        dduId,
                                                   int        rosId,
                                                   int        robId,
                                                   int        tdcId,
                                                   int tdcChannelId ) {
  dduId -= nMinDDU;
  rosId -= nMinROS;
  robId -= nMinROB;
  tdcId -= nMinTDC;
  tdcChannelId -= nMinTDCChannel;
  if (        dduId >= nMaxDDU        ) return 0;
  if (        rosId >= nMaxROS        ) return 0;
  if (        robId >= nMaxROB        ) return 0;
  if (        tdcId >= nMaxTDC        ) return 0;
  if ( tdcChannelId >= nMaxTDCChannel ) return 0;
  return ( ( ( ( ( ( ( dduId   * nMaxROS        )
              +        rosId ) * nMaxROB        )
              +        robId ) * nMaxTDC        )
              +        tdcId ) * nMaxTDCChannel )
              + tdcChannelId;
}


template<class T>
const std::string& DTDataBuffer<T>::NamedBuffer::type() const {
  return bufferType;
}


template<class T>
const std::string& DTDataBuffer<T>::NamedBuffer::name() const {
  return bufferName;
}

